AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: WebSocket API Backend with Lambda Functions

Globals:
  Function:
    Runtime: nodejs20.x
    Timeout: 10

Parameters:
  WebSocketApiId:
    Type: String
    Default: p4d5mngovh
    Description: ID of the WebSocket API
  WebSocketStage:
    Type: String
    Default: dev
    Description: Stage name (default 'dev')
  DynamoDBEndpoint:
    Type: String
    Default: ""
    Description: (optional) DynamoDB Local endpoint for local development

Resources:
  # Table Definitions
  MessagesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Messages
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: userIdTimestampIndex
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: timestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  ConversationsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Conversations
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: GSI1_PK
          AttributeType: S
        - AttributeName: GSI1_SK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: GSI1
          KeySchema:
            - AttributeName: GSI1_PK
              KeyType: HASH
            - AttributeName: GSI1_SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  UserMetadataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: UserMetadata
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH

  # Shared IAM Role for all Lambdas
  SharedLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
      Policies:
        - PolicyName: AllowLambdaInvoke
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:mtjs-websocket-backend-*
        - PolicyName: AllowCognitoAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:AdminUpdateUserAttributes
                  - cognito-idp:AdminGetUser
                Resource: "*"

  # Lambda Permissions
  AllowApiGatewayInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt OnConnectFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApiId}/${WebSocketStage}/@connect

  AllowApiGatewayInvokeOnDisconnect:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt OnDisconnectFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApiId}/${WebSocketStage}/@disconnect

  AllowApiGatewayInvokeSendMessage:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt SendMessageFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApiId}/${WebSocketStage}/sendMessage

  AllowApiGatewayInvokeSetReady:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt SetReadyFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApiId}/${WebSocketStage}/setReady

  AllowApiGatewayInvokeStartConversation:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt StartConversationFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApiId}/${WebSocketStage}/startConversation

  AllowApiGatewayInvokeEndConversation:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt EndConversationFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApiId}/${WebSocketStage}/endConversation

  AllowApiGatewayInvokeFetchChatHistory:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt FetchChatHistoryFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApiId}/${WebSocketStage}/fetchChatHistory

  AllowApiGatewayInvokeGetCurrentState:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt GetCurrentStateFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApiId}/${WebSocketStage}/getCurrentState

  AllowApiGatewayInvokeUpdatePresence:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt UpdatePresenceFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApiId}/${WebSocketStage}/updatePresence

  # Lambda Functions
  OnConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: onConnect/
      Role: !GetAtt SharedLambdaRole.Arn
      Environment:
        Variables:
          CONNECTIONS_TABLE: Connections
          DYNAMODB_ENDPOINT: !Ref DynamoDBEndpoint

  OnDisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: onDisconnect/
      Role: !GetAtt SharedLambdaRole.Arn
      Environment:
        Variables:
          CONNECTIONS_TABLE: Connections
          DYNAMODB_ENDPOINT: !Ref DynamoDBEndpoint

  SendMessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: sendMessage/
      Role: !GetAtt SharedLambdaRole.Arn
      Environment:
        Variables:
          MESSAGES_TABLE: Messages
          CONNECTIONS_TABLE: Connections
          DYNAMODB_ENDPOINT: !Ref DynamoDBEndpoint

  SetReadyFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: setReady/
      Role: !GetAtt SharedLambdaRole.Arn
      Environment:
        Variables:
          USER_METADATA_TABLE: UserMetadata
          DYNAMODB_ENDPOINT: !Ref DynamoDBEndpoint

  StartConversationFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: startConversation/
      Role: !GetAtt SharedLambdaRole.Arn
      Environment:
        Variables:
          CONVERSATIONS_TABLE: Conversations
          USER_METADATA_TABLE: UserMetadata
          DYNAMODB_ENDPOINT: !Ref DynamoDBEndpoint

  EndConversationFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: endConversation/
      Role: !GetAtt SharedLambdaRole.Arn
      Environment:
        Variables:
          CONVERSATIONS_TABLE: Conversations
          USER_METADATA_TABLE: UserMetadata
          DYNAMODB_ENDPOINT: !Ref DynamoDBEndpoint

  FetchChatHistoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: fetchChatHistory/
      Role: !GetAtt SharedLambdaRole.Arn
      Environment:
        Variables:
          MESSAGES_TABLE: Messages
          DYNAMODB_ENDPOINT: !Ref DynamoDBEndpoint

  GetCurrentStateFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: getCurrentState/
      Role: !GetAtt SharedLambdaRole.Arn
      Environment:
        Variables:
          USER_METADATA_TABLE: UserMetadata
          DYNAMODB_ENDPOINT: !Ref DynamoDBEndpoint

  UpdatePresenceFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: updatePresence/
      Role: !GetAtt SharedLambdaRole.Arn
      Environment:
        Variables:
          USER_METADATA_TABLE: UserMetadata
          CONNECTIONS_TABLE: Connections
          CONVERSATIONS_TABLE: Conversations
          WEBSOCKET_ENDPOINT: !Sub https://${WebSocketApiId}.execute-api.${AWS::Region}.amazonaws.com/${WebSocketStage}
          DYNAMODB_ENDPOINT: !Ref DynamoDBEndpoint

  BatchCognitoUploadFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: batchCognitoUpload/
      Role: !GetAtt SharedLambdaRole.Arn
      Environment:
        Variables:
          USER_METADATA_TABLE: UserMetadata
          DYNAMODB_ENDPOINT: !Ref DynamoDBEndpoint

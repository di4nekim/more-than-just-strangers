AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: WebSocket API Backend with Lambda Functions

Parameters:
  Environment:
    Type: String
    Default: development
    Description: Environment name (development, staging, production)
    AllowedValues: [development, staging, production]

Conditions:
  IsProduction: !Equals [!Ref Environment, production]
  IsNonProduction: !Not [!Equals [!Ref Environment, production]]

Globals:
  Function:
    Runtime: nodejs20.x
    Timeout: 10

Resources:
  # DynamoDB Tables
  UserMetadataTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      TableName: !Sub "UserMetadataV2-${Environment}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: connectionId
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: GSI_connectionId
          KeySchema:
            - AttributeName: connectionId
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  MessagesTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      TableName: !Sub "MessagesV2-${Environment}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE

  ConversationsTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      TableName: !Sub "ConversationsV3-${Environment}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH

  MatchmakingQueueTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      TableName: !Sub "MatchmakingQueue-${Environment}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: status
          AttributeType: S
        - AttributeName: joinedAt
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: StatusIndex
          KeySchema:
            - AttributeName: status
              KeyType: HASH
            - AttributeName: joinedAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: MatchmakingQueue

  WebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: mtjs-websocket-api
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: $request.body.action

  WebSocketStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref WebSocketApi
      StageName: !Ref Environment
      AutoDeploy: true

  # Development/Staging Lambda Role (Broader Permissions)
  NonProductionLambdaRole:
    Type: AWS::IAM::Role
    Condition: IsNonProduction
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
      Policies:
        - PolicyName: ParameterStoreAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                  - ssm:GetParametersByPath
                Resource:
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/mtjs/*"

  # Production Lambda Role (Least Privilege)
  ProductionLambdaRole:
    Type: AWS::IAM::Role
    Condition: IsProduction
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: ProductionDynamoDBAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:BatchGetItem
                  - dynamodb:BatchWriteItem
                Resource:
                  - !GetAtt UserMetadataTable.Arn
                  - !GetAtt MessagesTable.Arn
                  - !GetAtt ConversationsTable.Arn
                  - !GetAtt MatchmakingQueueTable.Arn
                  - !Sub "${UserMetadataTable.Arn}/index/*"
                  - !Sub "${MatchmakingQueueTable.Arn}/index/*"
        - PolicyName: ProductionAPIGatewayAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - execute-api:ManageConnections
                Resource:
                  - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/${Environment}/POST/@connections/*"
        - PolicyName: ProductionParameterStoreAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                  - ssm:GetParametersByPath
                Resource:
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/mtjs/production/*"
        - PolicyName: ProductionCloudWatchLogsAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/mtjs-*-production:*"

  # Lambda Functions -- Function, Integration, Route, Permission (automates lambda/api gateway lifecycle)

  OnConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "mtjs-websocket-onconnect-${Environment}"
      Handler: onConnect/index.handler
      CodeUri: ./
      Role: !If [IsProduction, !GetAtt ProductionLambdaRole.Arn, !GetAtt NonProductionLambdaRole.Arn]
      Environment:
        Variables:
          USER_METADATA_TABLE: !Sub "UserMetadataV2-${Environment}"
          CONVERSATIONS_TABLE: !Sub "ConversationsV3-${Environment}"
          MESSAGES_TABLE: !Sub "MessagesV2-${Environment}"
          MATCHMAKING_QUEUE_TABLE: !Sub "MatchmakingQueue-${Environment}"
          ENVIRONMENT: !Ref Environment
          

  OnConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub
        - arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
        - {
            Region: !Ref "AWS::Region",
            LambdaArn: !GetAtt OnConnectFunction.Arn,
          }

  OnConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $connect
      Target: !Sub integrations/${OnConnectIntegration}
      AuthorizationType: NONE

  OnConnectPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnConnectFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/*

  OnDisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "mtjs-websocket-ondisconnect-${Environment}"
      Handler: onDisconnect/index.handler
      CodeUri: ./
      Role: !If [IsProduction, !GetAtt ProductionLambdaRole.Arn, !GetAtt NonProductionLambdaRole.Arn]
      Environment:
        Variables:
          USER_METADATA_TABLE: !Sub "UserMetadataV2-${Environment}"
          CONVERSATIONS_TABLE: !Sub "ConversationsV3-${Environment}"
          MESSAGES_TABLE: !Sub "MessagesV2-${Environment}"
          MATCHMAKING_QUEUE_TABLE: !Sub "MatchmakingQueue-${Environment}"
          ENVIRONMENT: !Ref Environment

  OnDisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub
        - arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
        - {
            Region: !Ref "AWS::Region",
            LambdaArn: !GetAtt OnDisconnectFunction.Arn,
          }

  OnDisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $disconnect
      Target: !Sub integrations/${OnDisconnectIntegration}

  OnDisconnectPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnDisconnectFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/${Environment}/$disconnect

  SendMessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "mtjs-websocket-sendmessage-${Environment}"
      Handler: sendMessage/index.handler
      CodeUri: ./
      Role: !If [IsProduction, !GetAtt ProductionLambdaRole.Arn, !GetAtt NonProductionLambdaRole.Arn]
      Environment:
        Variables:
          USER_METADATA_TABLE: !Sub "UserMetadataV2-${Environment}"
          CONVERSATIONS_TABLE: !Sub "ConversationsV3-${Environment}"
          MESSAGES_TABLE: !Sub "MessagesV2-${Environment}"
          MATCHMAKING_QUEUE_TABLE: !Sub "MatchmakingQueue-${Environment}"
          WEBSOCKET_API_URL: !Sub "https://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}"
          ENVIRONMENT: !Ref Environment
          

  SendMessageIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub
        - arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
        - {
            Region: !Ref "AWS::Region",
            LambdaArn: !GetAtt SendMessageFunction.Arn,
          }

  SendMessageRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: sendMessage
      Target: !Sub integrations/${SendMessageIntegration}

  SendMessagePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SendMessageFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/${Environment}/sendMessage

  # Add typingStatus route using the same SendMessage function
  TypingStatusRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: typingStatus
      Target: !Sub integrations/${SendMessageIntegration}

  TypingStatusPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SendMessageFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/${Environment}/typingStatus

  SetReadyFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "mtjs-websocket-setready-${Environment}"
      Handler: setReady/index.handler
      CodeUri: ./
      Role: !If [IsProduction, !GetAtt ProductionLambdaRole.Arn, !GetAtt NonProductionLambdaRole.Arn]
      Environment:
        Variables:
          USER_METADATA_TABLE: !Sub "UserMetadataV2-${Environment}"
          CONVERSATIONS_TABLE: !Sub "ConversationsV3-${Environment}"
          MESSAGES_TABLE: !Sub "MessagesV2-${Environment}"
          MATCHMAKING_QUEUE_TABLE: !Sub "MatchmakingQueue-${Environment}"
          WEBSOCKET_API_URL: !Sub "https://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}"
          ENVIRONMENT: !Ref Environment
          

  SetReadyIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub
        - arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
        - {
            Region: !Ref "AWS::Region",
            LambdaArn: !GetAtt SetReadyFunction.Arn,
          }

  SetReadyRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: setReady
      Target: !Sub integrations/${SetReadyIntegration}

  SetReadyPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SetReadyFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/${Environment}/setReady

  StartConversationFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "mtjs-websocket-startconversation-${Environment}"
      Handler: startConversation/index.handler
      CodeUri: ./
      Role: !If [IsProduction, !GetAtt ProductionLambdaRole.Arn, !GetAtt NonProductionLambdaRole.Arn]
      Environment:
        Variables:
          USER_METADATA_TABLE: !Sub "UserMetadataV2-${Environment}"
          CONVERSATIONS_TABLE: !Sub "ConversationsV3-${Environment}"
          MESSAGES_TABLE: !Sub "MessagesV2-${Environment}"
          MATCHMAKING_QUEUE_TABLE: !Sub "MatchmakingQueue-${Environment}"
          WEBSOCKET_API_URL: !Sub "https://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}"
          ENVIRONMENT: !Ref Environment
          

  StartConversationIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub
        - arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
        - {
            Region: !Ref "AWS::Region",
            LambdaArn: !GetAtt StartConversationFunction.Arn,
          }

  StartConversationRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: startConversation
      Target: !Sub integrations/${StartConversationIntegration}

  StartConversationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref StartConversationFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/${Environment}/startConversation

  EndConversationFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "mtjs-websocket-endconversation-${Environment}"
      Handler: endConversation/index.handler
      CodeUri: ./
      Role: !If [IsProduction, !GetAtt ProductionLambdaRole.Arn, !GetAtt NonProductionLambdaRole.Arn]
      Environment:
        Variables:
          USER_METADATA_TABLE: !Sub "UserMetadataV2-${Environment}"
          CONVERSATIONS_TABLE: !Sub "ConversationsV3-${Environment}"
          MESSAGES_TABLE: !Sub "MessagesV2-${Environment}"
          MATCHMAKING_QUEUE_TABLE: !Sub "MatchmakingQueue-${Environment}"
          WEBSOCKET_API_URL: !Sub "https://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}"
          ENVIRONMENT: !Ref Environment
          

  EndConversationIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub
        - arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
        - {
            Region: !Ref "AWS::Region",
            LambdaArn: !GetAtt EndConversationFunction.Arn,
          }

  EndConversationRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: endConversation
      Target: !Sub integrations/${EndConversationIntegration}

  EndConversationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref EndConversationFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/${Environment}/endConversation

  FetchChatHistoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "mtjs-websocket-fetchchathistory-${Environment}"
      Handler: fetchChatHistory/index.handler
      CodeUri: ./
      Role: !If [IsProduction, !GetAtt ProductionLambdaRole.Arn, !GetAtt NonProductionLambdaRole.Arn]
      Environment:
        Variables:
          USER_METADATA_TABLE: !Sub "UserMetadataV2-${Environment}"
          CONVERSATIONS_TABLE: !Sub "ConversationsV3-${Environment}"
          MESSAGES_TABLE: !Sub "MessagesV2-${Environment}"
          MATCHMAKING_QUEUE_TABLE: !Sub "MatchmakingQueue-${Environment}"
          WEBSOCKET_API_URL: !Sub "https://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}"
          ENVIRONMENT: !Ref Environment
         

  FetchChatHistoryIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub
        - arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
        - {
            Region: !Ref "AWS::Region",
            LambdaArn: !GetAtt FetchChatHistoryFunction.Arn,
          }

  FetchChatHistoryRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: fetchChatHistory
      Target: !Sub integrations/${FetchChatHistoryIntegration}

  FetchChatHistoryPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref FetchChatHistoryFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/${Environment}/fetchChatHistory

  GetCurrentStateFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "mtjs-websocket-getcurrentstate-${Environment}"
      Handler: getCurrentState/index.handler
      CodeUri: ./
      Role: !If [IsProduction, !GetAtt ProductionLambdaRole.Arn, !GetAtt NonProductionLambdaRole.Arn]
      Environment:
        Variables:
          USER_METADATA_TABLE: !Sub "UserMetadataV2-${Environment}"
          CONVERSATIONS_TABLE: !Sub "ConversationsV3-${Environment}"
          MESSAGES_TABLE: !Sub "MessagesV2-${Environment}"
          MATCHMAKING_QUEUE_TABLE: !Sub "MatchmakingQueue-${Environment}"
          WEBSOCKET_API_URL: !Sub "https://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}"
          ENVIRONMENT: !Ref Environment
          

  GetCurrentStateIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub
        - arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
        - {
            Region: !Ref "AWS::Region",
            LambdaArn: !GetAtt GetCurrentStateFunction.Arn,
          }

  GetCurrentStateRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: getCurrentState
      Target: !Sub integrations/${GetCurrentStateIntegration}

  GetCurrentStatePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref GetCurrentStateFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/${Environment}/getCurrentState

  UpdatePresenceFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "mtjs-websocket-updatepresence-${Environment}"
      Handler: updatePresence/index.handler
      CodeUri: ./
      Role: !If [IsProduction, !GetAtt ProductionLambdaRole.Arn, !GetAtt NonProductionLambdaRole.Arn]
      Environment:
        Variables:
          USER_METADATA_TABLE: !Sub "UserMetadataV2-${Environment}"
          CONVERSATIONS_TABLE: !Sub "ConversationsV3-${Environment}"
          MESSAGES_TABLE: !Sub "MessagesV2-${Environment}"
          MATCHMAKING_QUEUE_TABLE: !Sub "MatchmakingQueue-${Environment}"
          WEBSOCKET_API_URL: !Sub "https://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}"
          ENVIRONMENT: !Ref Environment
          

  UpdatePresenceIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub
        - arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
        - {
            Region: !Ref "AWS::Region",
            LambdaArn: !GetAtt UpdatePresenceFunction.Arn,
          }

  UpdatePresenceRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: updatePresence
      Target: !Sub integrations/${UpdatePresenceIntegration}

  UpdatePresencePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref UpdatePresenceFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/${Environment}/updatePresence

  SyncConversationFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "mtjs-websocket-syncconversation-${Environment}"
      Handler: syncConversation/index.handler
      CodeUri: ./
      Role: !If [IsProduction, !GetAtt ProductionLambdaRole.Arn, !GetAtt NonProductionLambdaRole.Arn]
      Environment:
        Variables:
          USER_METADATA_TABLE: !Sub "UserMetadataV2-${Environment}"
          CONVERSATIONS_TABLE: !Sub "ConversationsV3-${Environment}"
          MESSAGES_TABLE: !Sub "MessagesV2-${Environment}"
          MATCHMAKING_QUEUE_TABLE: !Sub "MatchmakingQueue-${Environment}"
          WEBSOCKET_API_URL: !Sub "https://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}"
          ENVIRONMENT: !Ref Environment
          

  SyncConversationIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub
        - arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
        - {
            Region: !Ref "AWS::Region",
            LambdaArn: !GetAtt SyncConversationFunction.Arn,
          }

  SyncConversationRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: syncConversation
      Target: !Sub integrations/${SyncConversationIntegration}

  SyncConversationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SyncConversationFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/${Environment}/syncConversation

Outputs:
  WebSocketUrl:
    Description: mtjs websocket url
    Value: !Sub "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}"

  WebSocketApiId:
    Description: WebSocket API ID for E2E testing
    Value: !Ref WebSocketApi

  MatchmakingQueueTableName:
    Description: Name of the Matchmaking Queue table
    Value: !Ref MatchmakingQueueTable
    Export:
      Name: !Sub "${Environment}-MatchmakingQueueTableName"

  MatchmakingQueueTableArn:
    Description: ARN of the Matchmaking Queue table
    Value: !GetAtt MatchmakingQueueTable.Arn
    Export:
      Name: !Sub "${Environment}-MatchmakingQueueTableArn"

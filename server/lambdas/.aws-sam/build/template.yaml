AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: WebSocket API Backend with Lambda Functions
Globals:
  Function:
    Runtime: nodejs20.x
    Timeout: 10
Resources:
  UserMetadataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: UserMetadata
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
      - AttributeName: PK
        AttributeType: S
      KeySchema:
      - AttributeName: PK
        KeyType: HASH
  MessagesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Messages
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
      - AttributeName: PK
        AttributeType: S
      - AttributeName: SK
        AttributeType: S
      - AttributeName: userId
        AttributeType: S
      - AttributeName: timestamp
        AttributeType: S
      KeySchema:
      - AttributeName: PK
        KeyType: HASH
      - AttributeName: SK
        KeyType: RANGE
      GlobalSecondaryIndexes:
      - IndexName: userIdTimestampIndex
        KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE
        Projection:
          ProjectionType: ALL
  ConversationsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Conversations
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
      - AttributeName: PK
        AttributeType: S
      - AttributeName: GSI1_PK
        AttributeType: S
      - AttributeName: GSI1_SK
        AttributeType: S
      KeySchema:
      - AttributeName: PK
        KeyType: HASH
      GlobalSecondaryIndexes:
      - IndexName: GSI1
        KeySchema:
        - AttributeName: GSI1_PK
          KeyType: HASH
        - AttributeName: GSI1_SK
          KeyType: RANGE
        Projection:
          ProjectionType: ALL
  WebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: mtjs-websocket-api
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: $request.body.action
  WebSocketStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId:
        Ref: WebSocketApi
      StageName: Dev
      AutoDeploy: true
  SharedLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      - arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess
      - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
  OnConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: OnConnectFunction
      Role:
        Fn::GetAtt:
        - SharedLambdaRole
        - Arn
      Environment:
        Variables:
          USER_METADATA_TABLE: UserMetadata
          CONVERSATIONS_TABLE: Conversations
          MESSAGES_TABLE: Messages
    Metadata:
      SamResourceId: OnConnectFunction
  OnConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
        - arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
        - Region:
            Ref: AWS::Region
          LambdaArn:
            Fn::GetAtt:
            - OnConnectFunction
            - Arn
  OnConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: WebSocketApi
      RouteKey: $connect
      Target:
        Fn::Sub: integrations/${OnConnectIntegration}
  OnConnectPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: OnConnectFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/Dev/$connect
  OnDisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: OnDisconnectFunction
      Role:
        Fn::GetAtt:
        - SharedLambdaRole
        - Arn
      Environment:
        Variables:
          USER_METADATA_TABLE: UserMetadata
          CONVERSATIONS_TABLE: Conversations
          MESSAGES_TABLE: Messages
    Metadata:
      SamResourceId: OnDisconnectFunction
  OnDisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
        - arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
        - Region:
            Ref: AWS::Region
          LambdaArn:
            Fn::GetAtt:
            - OnDisconnectFunction
            - Arn
  OnDisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: WebSocketApi
      RouteKey: $disconnect
      Target:
        Fn::Sub: integrations/${OnDisconnectIntegration}
  OnDisconnectPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: OnDisconnectFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/Dev/$disconnect
  SendMessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: SendMessageFunction
      Role:
        Fn::GetAtt:
        - SharedLambdaRole
        - Arn
      Environment:
        Variables:
          USER_METADATA_TABLE: UserMetadata
          CONVERSATIONS_TABLE: Conversations
          MESSAGES_TABLE: Messages
    Metadata:
      SamResourceId: SendMessageFunction
  SendMessageIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
        - arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
        - Region:
            Ref: AWS::Region
          LambdaArn:
            Fn::GetAtt:
            - SendMessageFunction
            - Arn
  SendMessageRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: WebSocketApi
      RouteKey: sendMessage
      Target:
        Fn::Sub: integrations/${SendMessageIntegration}
  SendMessagePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: SendMessageFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/Dev/sendMessage
  SetReadyFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: SetReadyFunction
      Role:
        Fn::GetAtt:
        - SharedLambdaRole
        - Arn
      Environment:
        Variables:
          USER_METADATA_TABLE: UserMetadata
          CONVERSATIONS_TABLE: Conversations
          MESSAGES_TABLE: Messages
    Metadata:
      SamResourceId: SetReadyFunction
  SetReadyIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
        - arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
        - Region:
            Ref: AWS::Region
          LambdaArn:
            Fn::GetAtt:
            - SetReadyFunction
            - Arn
  SetReadyRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: WebSocketApi
      RouteKey: setReady
      Target:
        Fn::Sub: integrations/${SetReadyIntegration}
  SetReadyPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: SetReadyFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/Dev/setReady
  StartConversationFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: StartConversationFunction
      Role:
        Fn::GetAtt:
        - SharedLambdaRole
        - Arn
      Environment:
        Variables:
          USER_METADATA_TABLE: UserMetadata
          CONVERSATIONS_TABLE: Conversations
          MESSAGES_TABLE: Messages
    Metadata:
      SamResourceId: StartConversationFunction
  StartConversationIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
        - arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
        - Region:
            Ref: AWS::Region
          LambdaArn:
            Fn::GetAtt:
            - StartConversationFunction
            - Arn
  StartConversationRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: WebSocketApi
      RouteKey: startConversation
      Target:
        Fn::Sub: integrations/${StartConversationIntegration}
  StartConversationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: StartConversationFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/Dev/startConversation
  EndConversationFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: EndConversationFunction
      Role:
        Fn::GetAtt:
        - SharedLambdaRole
        - Arn
      Environment:
        Variables:
          USER_METADATA_TABLE: UserMetadata
          CONVERSATIONS_TABLE: Conversations
          MESSAGES_TABLE: Messages
    Metadata:
      SamResourceId: EndConversationFunction
  EndConversationIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
        - arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
        - Region:
            Ref: AWS::Region
          LambdaArn:
            Fn::GetAtt:
            - EndConversationFunction
            - Arn
  EndConversationRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: WebSocketApi
      RouteKey: endConversation
      Target:
        Fn::Sub: integrations/${EndConversationIntegration}
  EndConversationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: EndConversationFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/Dev/endConversation
  FetchChatHistoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: FetchChatHistoryFunction
      Role:
        Fn::GetAtt:
        - SharedLambdaRole
        - Arn
      Environment:
        Variables:
          USER_METADATA_TABLE: UserMetadata
          CONVERSATIONS_TABLE: Conversations
          MESSAGES_TABLE: Messages
    Metadata:
      SamResourceId: FetchChatHistoryFunction
  FetchChatHistoryIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
        - arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
        - Region:
            Ref: AWS::Region
          LambdaArn:
            Fn::GetAtt:
            - FetchChatHistoryFunction
            - Arn
  FetchChatHistoryRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: WebSocketApi
      RouteKey: fetchChatHistory
      Target:
        Fn::Sub: integrations/${FetchChatHistoryIntegration}
  FetchChatHistoryPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: FetchChatHistoryFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/Dev/fetchChatHistory
  GetCurrentStateFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: GetCurrentStateFunction
      Role:
        Fn::GetAtt:
        - SharedLambdaRole
        - Arn
      Environment:
        Variables:
          USER_METADATA_TABLE: UserMetadata
          CONVERSATIONS_TABLE: Conversations
          MESSAGES_TABLE: Messages
    Metadata:
      SamResourceId: GetCurrentStateFunction
  GetCurrentStateIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
        - arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
        - Region:
            Ref: AWS::Region
          LambdaArn:
            Fn::GetAtt:
            - GetCurrentStateFunction
            - Arn
  GetCurrentStateRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: WebSocketApi
      RouteKey: getCurrentState
      Target:
        Fn::Sub: integrations/${GetCurrentStateIntegration}
  GetCurrentStatePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: GetCurrentStateFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/Dev/getCurrentState
  UpdatePresenceFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: UpdatePresenceFunction
      Role:
        Fn::GetAtt:
        - SharedLambdaRole
        - Arn
      Environment:
        Variables:
          USER_METADATA_TABLE: UserMetadata
          CONVERSATIONS_TABLE: Conversations
          MESSAGES_TABLE: Messages
          WEBSOCKET_API_URL:
            Fn::Sub: wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/Dev/
    Metadata:
      SamResourceId: UpdatePresenceFunction
  UpdatePresenceIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
        - arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
        - Region:
            Ref: AWS::Region
          LambdaArn:
            Fn::GetAtt:
            - UpdatePresenceFunction
            - Arn
  UpdatePresenceRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: WebSocketApi
      RouteKey: updatePresence
      Target:
        Fn::Sub: integrations/${UpdatePresenceIntegration}
  UpdatePresencePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: UpdatePresenceFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/Dev/updatePresence
  BatchCognitoUploadFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: BatchCognitoUploadFunction
      Role:
        Fn::GetAtt:
        - SharedLambdaRole
        - Arn
      Environment:
        Variables:
          USER_METADATA_TABLE: UserMetadata
          CONVERSATIONS_TABLE: Conversations
          MESSAGES_TABLE: Messages
    Metadata:
      SamResourceId: BatchCognitoUploadFunction
  BatchCognitoUploadIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
        - arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
        - Region:
            Ref: AWS::Region
          LambdaArn:
            Fn::GetAtt:
            - BatchCognitoUploadFunction
            - Arn
  BatchCognitoUploadRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: WebSocketApi
      RouteKey: batchCognitoUpload
      Target:
        Fn::Sub: integrations/${BatchCognitoUploadIntegration}
  BatchCognitoUploadPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: BatchCognitoUploadFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/Dev/batchCognitoUpload
  SyncConversationFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: SyncConversationFunction
      Role:
        Fn::GetAtt:
        - SharedLambdaRole
        - Arn
      Environment:
        Variables:
          USER_METADATA_TABLE: UserMetadata
          CONVERSATIONS_TABLE: Conversations
          MESSAGES_TABLE: Messages
          WEBSOCKET_API_URL:
            Fn::Sub: wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/Dev/
    Metadata:
      SamResourceId: SyncConversationFunction
  SyncConversationIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
        - arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
        - Region:
            Ref: AWS::Region
          LambdaArn:
            Fn::GetAtt:
            - SyncConversationFunction
            - Arn
  SyncConversationRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: WebSocketApi
      RouteKey: syncConversation
      Target:
        Fn::Sub: integrations/${SyncConversationIntegration}
  SyncConversationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: SyncConversationFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/Dev/syncConversation
Outputs:
  WebSocketUrl:
    Description: mtjs websocket url
    Value:
      Fn::Sub: wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/Dev

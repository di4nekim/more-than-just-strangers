AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: WebSocket API Backend with Lambda Functions
Parameters:
  Environment:
    Type: String
    Default: development
    Description: Environment name (development, staging, production)
    AllowedValues:
    - development
    - staging
    - production
Conditions:
  IsProduction:
    Fn::Equals:
    - Ref: Environment
    - production
  IsNonProduction:
    Fn::Not:
    - Fn::Equals:
      - Ref: Environment
      - production
Globals:
  Function:
    Runtime: nodejs20.x
    Timeout: 10
Resources:
  UserMetadataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub: UserMetadataV2-${Environment}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
      - AttributeName: PK
        AttributeType: S
      - AttributeName: connectionId
        AttributeType: S
      KeySchema:
      - AttributeName: PK
        KeyType: HASH
      GlobalSecondaryIndexes:
      - IndexName: GSI_connectionId
        KeySchema:
        - AttributeName: connectionId
          KeyType: HASH
        Projection:
          ProjectionType: ALL
  MessagesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub: MessagesV2-${Environment}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
      - AttributeName: PK
        AttributeType: S
      - AttributeName: SK
        AttributeType: S
      KeySchema:
      - AttributeName: PK
        KeyType: HASH
      - AttributeName: SK
        KeyType: RANGE
  ConversationsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub: ConversationsV3-${Environment}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
      - AttributeName: PK
        AttributeType: S
      KeySchema:
      - AttributeName: PK
        KeyType: HASH
  MatchmakingQueueTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub: MatchmakingQueue-${Environment}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
      - AttributeName: PK
        AttributeType: S
      - AttributeName: status
        AttributeType: S
      - AttributeName: joinedAt
        AttributeType: S
      KeySchema:
      - AttributeName: PK
        KeyType: HASH
      GlobalSecondaryIndexes:
      - IndexName: StatusIndex
        KeySchema:
        - AttributeName: status
          KeyType: HASH
        - AttributeName: joinedAt
          KeyType: RANGE
        Projection:
          ProjectionType: ALL
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      Tags:
      - Key: Environment
        Value:
          Ref: Environment
      - Key: Purpose
        Value: MatchmakingQueue
  WebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: mtjs-websocket-api
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: $request.body.action
  WebSocketStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId:
        Ref: WebSocketApi
      StageName:
        Ref: Environment
      AutoDeploy: true
  NonProductionLambdaRole:
    Type: AWS::IAM::Role
    Condition: IsNonProduction
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      - arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess
      - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
      Policies:
      - PolicyName: ParameterStoreAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - ssm:GetParameter
            - ssm:GetParameters
            - ssm:GetParametersByPath
            Resource:
            - Fn::Sub: arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/mtjs/*
  ProductionLambdaRole:
    Type: AWS::IAM::Role
    Condition: IsProduction
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: ProductionDynamoDBAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:BatchGetItem
            - dynamodb:BatchWriteItem
            Resource:
            - Fn::GetAtt:
              - UserMetadataTable
              - Arn
            - Fn::GetAtt:
              - MessagesTable
              - Arn
            - Fn::GetAtt:
              - ConversationsTable
              - Arn
            - Fn::GetAtt:
              - MatchmakingQueueTable
              - Arn
            - Fn::Sub: ${UserMetadataTable.Arn}/index/*
            - Fn::Sub: ${MatchmakingQueueTable.Arn}/index/*
      - PolicyName: ProductionAPIGatewayAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - execute-api:ManageConnections
            Resource:
            - Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/${Environment}/POST/@connections/*
      - PolicyName: ProductionParameterStoreAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - ssm:GetParameter
            - ssm:GetParameters
            - ssm:GetParametersByPath
            Resource:
            - Fn::Sub: arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/mtjs/production/*
      - PolicyName: ProductionCloudWatchLogsAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource:
            - Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/mtjs-*-production:*
  OnConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: onConnect/index.handler
      CodeUri: OnConnectFunction
      Role:
        Fn::If:
        - IsProduction
        - Fn::GetAtt:
          - ProductionLambdaRole
          - Arn
        - Fn::GetAtt:
          - NonProductionLambdaRole
          - Arn
      Environment:
        Variables:
          USER_METADATA_TABLE:
            Fn::Sub: UserMetadataV2-${Environment}
          CONVERSATIONS_TABLE:
            Fn::Sub: ConversationsV3-${Environment}
          MESSAGES_TABLE:
            Fn::Sub: MessagesV2-${Environment}
          MATCHMAKING_QUEUE_TABLE:
            Fn::Sub: MatchmakingQueue-${Environment}
          ENVIRONMENT:
            Ref: Environment
    Metadata:
      SamResourceId: OnConnectFunction
  OnConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
        - arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
        - Region:
            Ref: AWS::Region
          LambdaArn:
            Fn::GetAtt:
            - OnConnectFunction
            - Arn
  OnConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: WebSocketApi
      RouteKey: $connect
      Target:
        Fn::Sub: integrations/${OnConnectIntegration}
      AuthorizationType: NONE
  OnConnectPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: OnConnectFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/*
  OnDisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: onDisconnect/index.handler
      CodeUri: OnDisconnectFunction
      Role:
        Fn::If:
        - IsProduction
        - Fn::GetAtt:
          - ProductionLambdaRole
          - Arn
        - Fn::GetAtt:
          - NonProductionLambdaRole
          - Arn
      Environment:
        Variables:
          USER_METADATA_TABLE:
            Fn::Sub: UserMetadataV2-${Environment}
          CONVERSATIONS_TABLE:
            Fn::Sub: ConversationsV3-${Environment}
          MESSAGES_TABLE:
            Fn::Sub: MessagesV2-${Environment}
          MATCHMAKING_QUEUE_TABLE:
            Fn::Sub: MatchmakingQueue-${Environment}
          ENVIRONMENT:
            Ref: Environment
    Metadata:
      SamResourceId: OnDisconnectFunction
  OnDisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
        - arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
        - Region:
            Ref: AWS::Region
          LambdaArn:
            Fn::GetAtt:
            - OnDisconnectFunction
            - Arn
  OnDisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: WebSocketApi
      RouteKey: $disconnect
      Target:
        Fn::Sub: integrations/${OnDisconnectIntegration}
  OnDisconnectPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: OnDisconnectFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/${Environment}/$disconnect
  SendMessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: sendMessage/index.handler
      CodeUri: SendMessageFunction
      Role:
        Fn::If:
        - IsProduction
        - Fn::GetAtt:
          - ProductionLambdaRole
          - Arn
        - Fn::GetAtt:
          - NonProductionLambdaRole
          - Arn
      Environment:
        Variables:
          USER_METADATA_TABLE:
            Fn::Sub: UserMetadataV2-${Environment}
          CONVERSATIONS_TABLE:
            Fn::Sub: ConversationsV3-${Environment}
          MESSAGES_TABLE:
            Fn::Sub: MessagesV2-${Environment}
          MATCHMAKING_QUEUE_TABLE:
            Fn::Sub: MatchmakingQueue-${Environment}
          WEBSOCKET_API_URL:
            Fn::Sub: https://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}
          ENVIRONMENT:
            Ref: Environment
    Metadata:
      SamResourceId: SendMessageFunction
  SendMessageIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
        - arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
        - Region:
            Ref: AWS::Region
          LambdaArn:
            Fn::GetAtt:
            - SendMessageFunction
            - Arn
  SendMessageRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: WebSocketApi
      RouteKey: sendMessage
      Target:
        Fn::Sub: integrations/${SendMessageIntegration}
  SendMessagePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: SendMessageFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/${Environment}/sendMessage
  TypingStatusRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: WebSocketApi
      RouteKey: typingStatus
      Target:
        Fn::Sub: integrations/${SendMessageIntegration}
  TypingStatusPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: SendMessageFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/${Environment}/typingStatus
  SetReadyFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: setReady/index.handler
      CodeUri: SetReadyFunction
      Role:
        Fn::If:
        - IsProduction
        - Fn::GetAtt:
          - ProductionLambdaRole
          - Arn
        - Fn::GetAtt:
          - NonProductionLambdaRole
          - Arn
      Environment:
        Variables:
          USER_METADATA_TABLE:
            Fn::Sub: UserMetadataV2-${Environment}
          CONVERSATIONS_TABLE:
            Fn::Sub: ConversationsV3-${Environment}
          MESSAGES_TABLE:
            Fn::Sub: MessagesV2-${Environment}
          MATCHMAKING_QUEUE_TABLE:
            Fn::Sub: MatchmakingQueue-${Environment}
          WEBSOCKET_API_URL:
            Fn::Sub: https://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}
          ENVIRONMENT:
            Ref: Environment
    Metadata:
      SamResourceId: SetReadyFunction
  SetReadyIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
        - arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
        - Region:
            Ref: AWS::Region
          LambdaArn:
            Fn::GetAtt:
            - SetReadyFunction
            - Arn
  SetReadyRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: WebSocketApi
      RouteKey: setReady
      Target:
        Fn::Sub: integrations/${SetReadyIntegration}
  SetReadyPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: SetReadyFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/${Environment}/setReady
  StartConversationFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: startConversation/index.handler
      CodeUri: StartConversationFunction
      Role:
        Fn::If:
        - IsProduction
        - Fn::GetAtt:
          - ProductionLambdaRole
          - Arn
        - Fn::GetAtt:
          - NonProductionLambdaRole
          - Arn
      Environment:
        Variables:
          USER_METADATA_TABLE:
            Fn::Sub: UserMetadataV2-${Environment}
          CONVERSATIONS_TABLE:
            Fn::Sub: ConversationsV3-${Environment}
          MESSAGES_TABLE:
            Fn::Sub: MessagesV2-${Environment}
          MATCHMAKING_QUEUE_TABLE:
            Fn::Sub: MatchmakingQueue-${Environment}
          WEBSOCKET_API_URL:
            Fn::Sub: https://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}
          ENVIRONMENT:
            Ref: Environment
    Metadata:
      SamResourceId: StartConversationFunction
  StartConversationIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
        - arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
        - Region:
            Ref: AWS::Region
          LambdaArn:
            Fn::GetAtt:
            - StartConversationFunction
            - Arn
  StartConversationRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: WebSocketApi
      RouteKey: startConversation
      Target:
        Fn::Sub: integrations/${StartConversationIntegration}
  StartConversationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: StartConversationFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/${Environment}/startConversation
  EndConversationFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: endConversation/index.handler
      CodeUri: EndConversationFunction
      Role:
        Fn::If:
        - IsProduction
        - Fn::GetAtt:
          - ProductionLambdaRole
          - Arn
        - Fn::GetAtt:
          - NonProductionLambdaRole
          - Arn
      Environment:
        Variables:
          USER_METADATA_TABLE:
            Fn::Sub: UserMetadataV2-${Environment}
          CONVERSATIONS_TABLE:
            Fn::Sub: ConversationsV3-${Environment}
          MESSAGES_TABLE:
            Fn::Sub: MessagesV2-${Environment}
          MATCHMAKING_QUEUE_TABLE:
            Fn::Sub: MatchmakingQueue-${Environment}
          WEBSOCKET_API_URL:
            Fn::Sub: https://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}
          ENVIRONMENT:
            Ref: Environment
    Metadata:
      SamResourceId: EndConversationFunction
  EndConversationIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
        - arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
        - Region:
            Ref: AWS::Region
          LambdaArn:
            Fn::GetAtt:
            - EndConversationFunction
            - Arn
  EndConversationRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: WebSocketApi
      RouteKey: endConversation
      Target:
        Fn::Sub: integrations/${EndConversationIntegration}
  EndConversationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: EndConversationFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/${Environment}/endConversation
  FetchChatHistoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: fetchChatHistory/index.handler
      CodeUri: FetchChatHistoryFunction
      Role:
        Fn::If:
        - IsProduction
        - Fn::GetAtt:
          - ProductionLambdaRole
          - Arn
        - Fn::GetAtt:
          - NonProductionLambdaRole
          - Arn
      Environment:
        Variables:
          USER_METADATA_TABLE:
            Fn::Sub: UserMetadataV2-${Environment}
          CONVERSATIONS_TABLE:
            Fn::Sub: ConversationsV3-${Environment}
          MESSAGES_TABLE:
            Fn::Sub: MessagesV2-${Environment}
          MATCHMAKING_QUEUE_TABLE:
            Fn::Sub: MatchmakingQueue-${Environment}
          WEBSOCKET_API_URL:
            Fn::Sub: https://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}
          ENVIRONMENT:
            Ref: Environment
    Metadata:
      SamResourceId: FetchChatHistoryFunction
  FetchChatHistoryIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
        - arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
        - Region:
            Ref: AWS::Region
          LambdaArn:
            Fn::GetAtt:
            - FetchChatHistoryFunction
            - Arn
  FetchChatHistoryRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: WebSocketApi
      RouteKey: fetchChatHistory
      Target:
        Fn::Sub: integrations/${FetchChatHistoryIntegration}
  FetchChatHistoryPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: FetchChatHistoryFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/${Environment}/fetchChatHistory
  GetCurrentStateFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: getCurrentState/index.handler
      CodeUri: GetCurrentStateFunction
      Role:
        Fn::If:
        - IsProduction
        - Fn::GetAtt:
          - ProductionLambdaRole
          - Arn
        - Fn::GetAtt:
          - NonProductionLambdaRole
          - Arn
      Environment:
        Variables:
          USER_METADATA_TABLE:
            Fn::Sub: UserMetadataV2-${Environment}
          CONVERSATIONS_TABLE:
            Fn::Sub: ConversationsV3-${Environment}
          MESSAGES_TABLE:
            Fn::Sub: MessagesV2-${Environment}
          MATCHMAKING_QUEUE_TABLE:
            Fn::Sub: MatchmakingQueue-${Environment}
          WEBSOCKET_API_URL:
            Fn::Sub: https://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}
          ENVIRONMENT:
            Ref: Environment
    Metadata:
      SamResourceId: GetCurrentStateFunction
  GetCurrentStateIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
        - arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
        - Region:
            Ref: AWS::Region
          LambdaArn:
            Fn::GetAtt:
            - GetCurrentStateFunction
            - Arn
  GetCurrentStateRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: WebSocketApi
      RouteKey: getCurrentState
      Target:
        Fn::Sub: integrations/${GetCurrentStateIntegration}
  GetCurrentStatePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: GetCurrentStateFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/${Environment}/getCurrentState
  UpdatePresenceFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: updatePresence/index.handler
      CodeUri: UpdatePresenceFunction
      Role:
        Fn::If:
        - IsProduction
        - Fn::GetAtt:
          - ProductionLambdaRole
          - Arn
        - Fn::GetAtt:
          - NonProductionLambdaRole
          - Arn
      Environment:
        Variables:
          USER_METADATA_TABLE:
            Fn::Sub: UserMetadataV2-${Environment}
          CONVERSATIONS_TABLE:
            Fn::Sub: ConversationsV3-${Environment}
          MESSAGES_TABLE:
            Fn::Sub: MessagesV2-${Environment}
          MATCHMAKING_QUEUE_TABLE:
            Fn::Sub: MatchmakingQueue-${Environment}
          WEBSOCKET_API_URL:
            Fn::Sub: https://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}
          ENVIRONMENT:
            Ref: Environment
    Metadata:
      SamResourceId: UpdatePresenceFunction
  UpdatePresenceIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
        - arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
        - Region:
            Ref: AWS::Region
          LambdaArn:
            Fn::GetAtt:
            - UpdatePresenceFunction
            - Arn
  UpdatePresenceRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: WebSocketApi
      RouteKey: updatePresence
      Target:
        Fn::Sub: integrations/${UpdatePresenceIntegration}
  UpdatePresencePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: UpdatePresenceFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/${Environment}/updatePresence
  SyncConversationFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: syncConversation/index.handler
      CodeUri: SyncConversationFunction
      Role:
        Fn::If:
        - IsProduction
        - Fn::GetAtt:
          - ProductionLambdaRole
          - Arn
        - Fn::GetAtt:
          - NonProductionLambdaRole
          - Arn
      Environment:
        Variables:
          USER_METADATA_TABLE:
            Fn::Sub: UserMetadataV2-${Environment}
          CONVERSATIONS_TABLE:
            Fn::Sub: ConversationsV3-${Environment}
          MESSAGES_TABLE:
            Fn::Sub: MessagesV2-${Environment}
          MATCHMAKING_QUEUE_TABLE:
            Fn::Sub: MatchmakingQueue-${Environment}
          WEBSOCKET_API_URL:
            Fn::Sub: https://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}
          ENVIRONMENT:
            Ref: Environment
    Metadata:
      SamResourceId: SyncConversationFunction
  SyncConversationIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
        - arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
        - Region:
            Ref: AWS::Region
          LambdaArn:
            Fn::GetAtt:
            - SyncConversationFunction
            - Arn
  SyncConversationRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: WebSocketApi
      RouteKey: syncConversation
      Target:
        Fn::Sub: integrations/${SyncConversationIntegration}
  SyncConversationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: SyncConversationFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/${Environment}/syncConversation
Outputs:
  WebSocketUrl:
    Description: mtjs websocket url
    Value:
      Fn::Sub: wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}
  WebSocketApiId:
    Description: WebSocket API ID for E2E testing
    Value:
      Ref: WebSocketApi
  MatchmakingQueueTableName:
    Description: Name of the Matchmaking Queue table
    Value:
      Ref: MatchmakingQueueTable
    Export:
      Name:
        Fn::Sub: ${Environment}-MatchmakingQueueTableName
  MatchmakingQueueTableArn:
    Description: ARN of the Matchmaking Queue table
    Value:
      Fn::GetAtt:
      - MatchmakingQueueTable
      - Arn
    Export:
      Name:
        Fn::Sub: ${Environment}-MatchmakingQueueTableArn

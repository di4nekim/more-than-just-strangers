#!/bin/bash

# Setup script for AWS E2E testing environment
# This script helps configure your environment to run E2E tests against AWS deployment

set -e

echo "🚀 Setting up AWS E2E Testing Environment"
echo "========================================="

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

print_info() {
    echo -e "${BLUE}ℹ️  $1${NC}"
}

# Check if AWS CLI is installed
echo ""
echo "1. Checking AWS CLI..."
if command -v aws &> /dev/null; then
    AWS_VERSION=$(aws --version)
    print_status "AWS CLI found: $AWS_VERSION"
else
    print_error "AWS CLI not found. Please install AWS CLI first:"
    echo "  https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html"
    exit 1
fi

# Check AWS credentials
echo ""
echo "2. Checking AWS credentials..."
if aws sts get-caller-identity &> /dev/null; then
    ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
    AWS_REGION=$(aws configure get region || echo "us-east-1")
    print_status "AWS credentials configured"
    print_info "Account ID: $ACCOUNT_ID"
    print_info "Region: $AWS_REGION"
else
    print_error "AWS credentials not configured. Please run:"
    echo "  aws configure"
    echo "  Or set environment variables: AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY"
    exit 1
fi

# Check if SAM stack is deployed
echo ""
echo "3. Checking SAM deployment..."
STACK_NAME="sam-app"  # Update this if your stack has a different name

if aws cloudformation describe-stacks --stack-name $STACK_NAME &> /dev/null; then
    print_status "CloudFormation stack '$STACK_NAME' found"
    
    # Get stack outputs
    echo ""
    echo "4. Getting deployment information..."
    
    # Try to get WebSocket API ID
    WEBSOCKET_API_ID=$(aws cloudformation describe-stacks \
        --stack-name $STACK_NAME \
        --query 'Stacks[0].Outputs[?OutputKey==`WebSocketApiId`].OutputValue' \
        --output text 2>/dev/null || echo "")
    
    if [ "$WEBSOCKET_API_ID" != "" ] && [ "$WEBSOCKET_API_ID" != "None" ]; then
        print_status "WebSocket API ID: $WEBSOCKET_API_ID"
        WEBSOCKET_URL="wss://${WEBSOCKET_API_ID}.execute-api.${AWS_REGION}.amazonaws.com/Dev"
        print_info "WebSocket URL: $WEBSOCKET_URL"
    else
        print_warning "WebSocket API ID not found in stack outputs"
        print_info "You may need to add WebSocket API ID to your SAM template outputs"
    fi
    
else
    print_error "CloudFormation stack '$STACK_NAME' not found"
    print_info "Please deploy your SAM application first:"
    echo "  cd server/lambdas"
    echo "  sam build"
    echo "  sam deploy --guided"
    exit 1
fi

# Check DynamoDB table access
echo ""
echo "5. Checking DynamoDB table access..."

TABLES=("ConversationsV2" "UserMetadataV2" "MessagesV2")

for TABLE in "${TABLES[@]}"; do
    if aws dynamodb describe-table --table-name $TABLE &> /dev/null; then
        STATUS=$(aws dynamodb describe-table --table-name $TABLE --query 'Table.TableStatus' --output text)
        print_status "Table $TABLE: $STATUS"
        
        # Check if we can read from the table
        if aws dynamodb scan --table-name $TABLE --limit 1 &> /dev/null; then
            print_status "Read access to $TABLE: OK"
        else
            print_warning "Cannot read from $TABLE - check IAM permissions"
        fi
    else
        print_error "Table $TABLE not found or no access"
    fi
done

# Generate environment configuration
echo ""
echo "6. Generating environment configuration..."

ENV_FILE="server/lambdas/endConversation/.env"

cat > $ENV_FILE << EOF
# AWS Configuration for E2E Testing
# Generated by setup-aws-e2e.sh on $(date)

# AWS Region
AWS_REGION=$AWS_REGION

# DynamoDB Table Names
CONVERSATIONS_TABLE=ConversationsV2
USER_METADATA_TABLE=UserMetadataV2
MESSAGES_TABLE=MessagesV2

# WebSocket API Configuration
EOF

if [ "$WEBSOCKET_API_ID" != "" ] && [ "$WEBSOCKET_API_ID" != "None" ]; then
    echo "WEBSOCKET_API_URL=$WEBSOCKET_URL" >> $ENV_FILE
    echo "WEBSOCKET_API_ID=$WEBSOCKET_API_ID" >> $ENV_FILE
else
    echo "# WEBSOCKET_API_URL=wss://your-api-id.execute-api.$AWS_REGION.amazonaws.com/Dev" >> $ENV_FILE
    echo "# WEBSOCKET_API_ID=your-api-id" >> $ENV_FILE
fi

print_status "Environment file created: $ENV_FILE"

# Test the configuration
echo ""
echo "7. Testing E2E configuration..."

cd server/lambdas/endConversation

# Load the environment file
if [ -f .env ]; then
    export $(cat .env | grep -v '^#' | xargs)
fi

# Run a simple validation test
if npm test -- --testNamePattern="validateAWSAccess" &> /dev/null; then
    print_status "AWS access validation: PASSED"
else
    print_warning "AWS access validation: Some issues detected"
    print_info "You can still run tests, but some may fail due to permissions"
fi

echo ""
echo "🎉 Setup Complete!"
echo "=================="
print_status "Your environment is configured for AWS E2E testing"
print_info "Environment file: $ENV_FILE"
echo ""
echo "Next steps:"
echo "1. Review the generated .env file and update if needed"
echo "2. Run E2E tests: cd server/lambdas/endConversation && npm run test:e2e"
echo "3. Monitor AWS costs as tests will use real AWS resources"
echo ""
print_warning "Remember: These tests will incur AWS charges for DynamoDB and API Gateway usage" 